<!doctype html>
<html>
<head>
    <title>Chess</title>
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css">
    <link rel="stylesheet" href="css/chessboard-0.3.0.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.2/chess.js"></script>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script>
    <script src="js/chessboard-0.3.0.min.js"></script>
    <script src="js/primus.js"></script>
    <style>
        body         { padding-top:80px; word-wrap:break-word; }
    </style>
</head>
<body>
<div class="container">

    <div class="page-header text-center">
        <h1><span class="fa fa-anchor"></span> Let's Play the Game.. </h1>
        <a href="/logout" class="btn btn-default btn-sm">Logout</a>
    </div>

    <div class="row">

        <!-- LOCAL INFORMATION -->
        <div class="col-sm-12">
            <div class="well">
                <h3><span class="fa fa-user"></span>   <%= user.local.user%> </h3>
            </div>
                <center>
                  Game Link: <span id="gameurl"/>
                </center>
                PGN: <span id="pgn"/>
<!--<
                <% if (user.local.email) { %>
                    <p>
                        <strong>id</strong>: <%= user._id %><br>
                        <strong>email</strong>: <%= user.local.email %><br>
                        <strong>password</strong>: <%= user.local.password %>
                    </p>

                    <a href="/unlink/local" class="btn btn-default">Unlink</a>
                <% } else { %>
                    <a href="/connect/local" class="btn btn-default">Connect Local</a>
                <% } %>
              -->


        </div>

    </div>
    <div class="row">
              <center>
                <div id="board" style="width: 400px"></div>
                <br/>
              </center>
<script>

// Initalise Socket & Game Logic
var primus = new Primus();
var game = new Chess();
// Variables
var playerColour, board, finalUrl, gameId, finalUrl, gameId
var moves = []


// Extract the GameID from the request headers.
var gameId = getUrlVars()['gameId'];
// If this is already an existing gameroom then assign the user to play as black.
if(gameId) {
  finalUrl = window.location.href;
  var playerColour = "b";
} else {
// Generate a room number and assign that player as white.
  gameId = generateId(20);
  finalUrl = window.location.href + "?gameId="+gameId;
  var playerColour = "w";
}


// Provide the gameurl
document.getElementById('gameurl').innerHTML += "<a href='"+finalUrl+"'>"+finalUrl+"</a><br/><br/>";


var glicko = '<%= user.local.rank %>';
// Inform the server that Client X has now joined the game room.
primus.write(
  {
  action: "join",
  room: gameId,
  data: {user: '<%= user.local.email %>', glicko2: '<%= user.local.rank %>'} // Send the username of the Client to the server.
  }
);


function checkGame() {
	// Assign appropriate strings for the depending on colour.
	var turnColour = (game.turn() === 'w' ? 'White' : 'Black');

	// Check whether or not any of the player's are currently in check.
	if( game.in_check() )
		console.log(turnColour +  " is now in check!");
	else
		console.log("Your turn, " + turnColour);


	// Has the game ended? If so, how has it ended?
	if( game.game_over() ) {
		if( game.in_checkmate() )
			console.log(turnColour + " has won the game by checkmate");
		else if ( game.in_draw() )
			console.log("It's a draw!");
		else if ( game.in_stalemate() )
			console.log("Stalemate!");
		else if ( game.in_threefold_repition() )
			console.log("Three move repition, the game is over.")
		else if ( game.insufficient_material() )
			console.log("There is not enough matieral. Game has ended as a draw.");
	}
};

// Everytime data is received about a move being made, update this on the player's board.
primus.on('data', function(message) {
  console.log(message);
  // Check if a change to the board has been made and if there has been a change, let's update this on the opponents screen.
  if(message.action === 'update' && message.data.pgn){
    game.load_pgn(message.data.pgn);
    document.getElementById('pgn').innerHTML=game.pgn();
    board.position(game.fen());
    checkGame();
  }
});





/*
Has the game ended? Is the game over by stalemate, checkmate or threefold repitition
*/


/////////////////////////////////
// FUNCTIONS
/////////////////////////////////


// Depending on the colour of the player, which pieces can the player move?
var onDragStart = function onDragStart (source, piece, position, orientation){
  if (
      game.game_over() ||
      game.in_draw() ||
      // If the player is white then do not let the player move any of the black pieces.
      (playerColour == 'w' && piece.search(/^b/) !== -1) ||
      // If the player is black then do not let the player move any of the white pieces.
      (playerColour == 'b' && piece.search(/^w/) !== -1)
     ) {
      return false;
    }
};


// Once a piece has been placed onto its desired square, check if the attempted move being made is legal.
var onPieceDrop = function(source, target){
  // Check if that the player is moving is legal.
  var move = game.move(
    {
    from: source,
    to: target,
    promotion: 'q' // NOTE: The game will always promote a pawn to a Queen for simplicity.
  });

  // If the move is illegal then return the piece back to its original position.
  if(move === null){
    return 'snapback';
  }
};

var onSnapEnd = function(target){
  // Update the move made by the user on the Chess on the board itself.
  board.position(game.fen());
  primus.write(
    {
    action: 'data',
    room: gameId,
    data: {
          pgn: game.pgn(),
          date: new Date(),
          user: '<%= user.local.email %>'
          }
    }
  )
  checkGame();
};
  // Check if the game has ended before doing anything else.
  // NOTE: if(game.turn() == "b" && game.in_check()) { console.log("worked...");} else { console.log("didn't work"); }


function getUrlVars()
{
    var vars = [], hash;
    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    for(var i = 0; i < hashes.length; i++)
    {
        hash = hashes[i].split('=');
        vars.push(hash[0]);
        vars[hash[0]] = hash[1];
    }
    return vars;
}


// dec2hex :: Integer -> String
function dec2hex (dec) {
  return ('0' + dec.toString(16)).substr(-2)
}

// generateId :: Integer -> String
function generateId (len) {
  var arr = new Uint8Array((len || 40) / 2)
  window.crypto.getRandomValues(arr)
  return Array.from(arr).map(dec2hex).join('')
}

// Create the board using the default (board1) setting.

// Settings for the board.
var cfg = {
  draggable: true,
  position: 'start',
  onDragStart: onDragStart,
  onDrop: onPieceDrop,
  onSnapEnd: onSnapEnd
}

var board = ChessBoard('board', cfg);
// If the player is playing as black then provide the perspective of the board from black's point of view.
if(getUrlVars()['gameId']){
  board.orientation('black');
}
</script>

    </div>

</div>
            </body>

</body>
</html>
